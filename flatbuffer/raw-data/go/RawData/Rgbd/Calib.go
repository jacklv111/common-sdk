// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package Rgbd

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Calib struct {
	_tab flatbuffers.Table
}

func GetRootAsCalib(buf []byte, offset flatbuffers.UOffsetT) *Calib {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Calib{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsCalib(buf []byte, offset flatbuffers.UOffsetT) *Calib {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Calib{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *Calib) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Calib) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Calib) Extrinsics(j int) float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetFloat32(a + flatbuffers.UOffsetT(j*4))
	}
	return 0
}

func (rcv *Calib) ExtrinsicsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *Calib) MutateExtrinsics(j int, n float32) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateFloat32(a+flatbuffers.UOffsetT(j*4), n)
	}
	return false
}

func (rcv *Calib) Intrinsics(j int) float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetFloat32(a + flatbuffers.UOffsetT(j*4))
	}
	return 0
}

func (rcv *Calib) IntrinsicsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *Calib) MutateIntrinsics(j int, n float32) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateFloat32(a+flatbuffers.UOffsetT(j*4), n)
	}
	return false
}

func CalibStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func CalibAddExtrinsics(builder *flatbuffers.Builder, extrinsics flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(extrinsics), 0)
}
func CalibStartExtrinsicsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func CalibAddIntrinsics(builder *flatbuffers.Builder, intrinsics flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(intrinsics), 0)
}
func CalibStartIntrinsicsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func CalibEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
