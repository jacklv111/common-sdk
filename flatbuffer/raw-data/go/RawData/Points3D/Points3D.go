// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package Points3D

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Points3D struct {
	_tab flatbuffers.Table
}

func GetRootAsPoints3D(buf []byte, offset flatbuffers.UOffsetT) *Points3D {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Points3D{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsPoints3D(buf []byte, offset flatbuffers.UOffsetT) *Points3D {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Points3D{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *Points3D) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Points3D) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Points3D) Pos(obj *Point3, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 12
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *Points3D) PosLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *Points3D) Rgb(obj *Rgb, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 3
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *Points3D) RgbLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *Points3D) Xmin() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *Points3D) MutateXmin(n float32) bool {
	return rcv._tab.MutateFloat32Slot(8, n)
}

func (rcv *Points3D) Xmax() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *Points3D) MutateXmax(n float32) bool {
	return rcv._tab.MutateFloat32Slot(10, n)
}

func (rcv *Points3D) Ymin() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *Points3D) MutateYmin(n float32) bool {
	return rcv._tab.MutateFloat32Slot(12, n)
}

func (rcv *Points3D) Ymax() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *Points3D) MutateYmax(n float32) bool {
	return rcv._tab.MutateFloat32Slot(14, n)
}

func (rcv *Points3D) Zmin() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *Points3D) MutateZmin(n float32) bool {
	return rcv._tab.MutateFloat32Slot(16, n)
}

func (rcv *Points3D) Zmax() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *Points3D) MutateZmax(n float32) bool {
	return rcv._tab.MutateFloat32Slot(18, n)
}

func (rcv *Points3D) Rmean() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *Points3D) MutateRmean(n float32) bool {
	return rcv._tab.MutateFloat32Slot(20, n)
}

func (rcv *Points3D) Gmean() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *Points3D) MutateGmean(n float32) bool {
	return rcv._tab.MutateFloat32Slot(22, n)
}

func (rcv *Points3D) Bmean() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *Points3D) MutateBmean(n float32) bool {
	return rcv._tab.MutateFloat32Slot(24, n)
}

func (rcv *Points3D) Rstd() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *Points3D) MutateRstd(n float32) bool {
	return rcv._tab.MutateFloat32Slot(26, n)
}

func (rcv *Points3D) Gstd() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *Points3D) MutateGstd(n float32) bool {
	return rcv._tab.MutateFloat32Slot(28, n)
}

func (rcv *Points3D) Bstd() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *Points3D) MutateBstd(n float32) bool {
	return rcv._tab.MutateFloat32Slot(30, n)
}

func Points3DStart(builder *flatbuffers.Builder) {
	builder.StartObject(14)
}
func Points3DAddPos(builder *flatbuffers.Builder, pos flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(pos), 0)
}
func Points3DStartPosVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(12, numElems, 4)
}
func Points3DAddRgb(builder *flatbuffers.Builder, rgb flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(rgb), 0)
}
func Points3DStartRgbVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(3, numElems, 1)
}
func Points3DAddXmin(builder *flatbuffers.Builder, xmin float32) {
	builder.PrependFloat32Slot(2, xmin, 0.0)
}
func Points3DAddXmax(builder *flatbuffers.Builder, xmax float32) {
	builder.PrependFloat32Slot(3, xmax, 0.0)
}
func Points3DAddYmin(builder *flatbuffers.Builder, ymin float32) {
	builder.PrependFloat32Slot(4, ymin, 0.0)
}
func Points3DAddYmax(builder *flatbuffers.Builder, ymax float32) {
	builder.PrependFloat32Slot(5, ymax, 0.0)
}
func Points3DAddZmin(builder *flatbuffers.Builder, zmin float32) {
	builder.PrependFloat32Slot(6, zmin, 0.0)
}
func Points3DAddZmax(builder *flatbuffers.Builder, zmax float32) {
	builder.PrependFloat32Slot(7, zmax, 0.0)
}
func Points3DAddRmean(builder *flatbuffers.Builder, rmean float32) {
	builder.PrependFloat32Slot(8, rmean, 0.0)
}
func Points3DAddGmean(builder *flatbuffers.Builder, gmean float32) {
	builder.PrependFloat32Slot(9, gmean, 0.0)
}
func Points3DAddBmean(builder *flatbuffers.Builder, bmean float32) {
	builder.PrependFloat32Slot(10, bmean, 0.0)
}
func Points3DAddRstd(builder *flatbuffers.Builder, rstd float32) {
	builder.PrependFloat32Slot(11, rstd, 0.0)
}
func Points3DAddGstd(builder *flatbuffers.Builder, gstd float32) {
	builder.PrependFloat32Slot(12, gstd, 0.0)
}
func Points3DAddBstd(builder *flatbuffers.Builder, bstd float32) {
	builder.PrependFloat32Slot(13, bstd, 0.0)
}
func Points3DEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
